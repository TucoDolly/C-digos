Aqui est√£o as respostas para suas quest√µes:  

1) **(0,5 ponto)** Em POO as classes representam as **caracter√≠sticas** de um objeto, por√©m √© necess√°rio uma **inst√¢ncia** para de fato fazer uso da referida classe. O √∫nico caso onde m√©todos e atributos podem ser utilizados sem a **inst√¢ncia**, √© quando estes s√£o **est√°ticos**.  

2) **(0,5 ponto)** Sim, √© poss√≠vel proteger os atributos de uma classe para que n√£o sejam acessados diretamente de fora dela. Isso pode ser feito utilizando os modificadores de acesso:  
   - **Privado (`private`)**: O atributo s√≥ pode ser acessado dentro da pr√≥pria classe.  
   - **Protegido (`protected`)**: O atributo pode ser acessado dentro da pr√≥pria classe e por classes filhas (heran√ßa).  

   Para manipular atributos protegidos, utilizamos **m√©todos getters e setters**, que permitem ler e modificar os valores dos atributos indiretamente. Exemplo:  

   ```java
   class Pessoa {
       private String nome;

       // Getter
       public String getNome() {
           return nome;
       }

       // Setter
       public void setNome(String nome) {
           this.nome = nome;
       }
   }
   ```

3) **(0,5 ponto)** Os pilares da Programa√ß√£o Orientada a Objetos s√£o:  
   a) **(X)** Heran√ßa  
   b) **( )** Interfaces  
   c) **(X)** Encapsulamento  
   d) **(X)** Abstra√ß√£o  
   e) **( )** Construtores  
   f) **(X)** Polimorfismo  

4) **(0,5 ponto)** Os modificadores de acesso definem o n√≠vel de visibilidade dos atributos e m√©todos de uma classe. S√£o eles:  
   - **`public`**: O atributo/m√©todo pode ser acessado de qualquer lugar.  
   - **`private`**: O atributo/m√©todo s√≥ pode ser acessado dentro da pr√≥pria classe.  
   - **`protected`**: O atributo/m√©todo pode ser acessado dentro da classe e por classes derivadas.  
   - **(Padr√£o ou `default`)**: Quando nenhum modificador √© especificado, o acesso √© permitido apenas dentro do mesmo pacote.  

   **Exemplo de uso em Java:**  
   ```java
   class Animal {
       protected String tipo = "Mam√≠fero"; // Acess√≠vel por subclasses

       private void som() {
           System.out.println("Som do animal");
       }

       public void emitirSom() {
           som(); // M√©todo privado sendo acessado dentro da pr√≥pria classe
       }
   }

   class Cachorro extends Animal {
       public void mostrarTipo() {
           System.out.println("Tipo: " + tipo); // Permitido pois √© protected
       }
   }

   public class Main {
       public static void main(String[] args) {
           Cachorro c = new Cachorro();
           c.mostrarTipo();
           c.emitirSom();
       }
   }
   ```

Se precisar de mais esclarecimentos, √© s√≥ chamar! üòä
